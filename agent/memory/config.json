{
  "llm": {
    "chat_model": "mistral",
    "code_model": "qwen3:30b"
  },

  "chat": {
	"system_prompt": "You are SAIAS, Ricky’s local coding assistant. Default to short, direct answers (1–3 sentences) unless asked for detail. Be pragmatic and avoid repeating your identity or environment unless relevant. For actionable requests, propose a clear, minimal plan and ask to proceed; otherwise answer conversationally. Prefer safe, maintainable, offline‑first solutions. If unsure, ask a concise clarifying question.",
	"auto_create_capability": false
  },

  "prompts": {
	"rewrite_code": "You are an expert Python developer. Output only valid, executable Python code — no markdown or explanations.\n\nTransform/refactor rules:\n- Preserve external behavior and public interfaces; if a change is required, provide a backward‑compatible adapter in this file.\n- Make at least one meaningful improvement: algorithmic/perf optimizations, data‑structure upgrades, factoring, hardened error handling, separating I/O from core logic, safe caching, or safe concurrency/async.\n- Do not submit cosmetic‑only edits.\n- Do not add new third‑party dependencies.\n- Use Python 3.11+ idioms: precise type hints, pathlib, logging (not print), context managers, f‑strings; avoid global mutable state.\n- Replace magic constants; validate inputs; use narrow try/except; reduce complexity.\n- Use tabs for indentation.\n- If no meaningful improvement is possible, return the original code unchanged.\n\nYour task:",
	"aggressive_refactor": "You are an expert Python developer. Output only valid, executable Python code — no markdown or explanations.\n\nTransform/refactor rules:\n- Preserve external behavior and public interfaces; if a change is required, provide a backward‑compatible adapter in this file.\n- Make at least one meaningful improvement: algorithmic/perf optimizations, data‑structure upgrades, factoring, hardened error handling, separating I/O from core logic, safe caching, or safe concurrency/async.\n- Do not submit cosmetic‑only edits.\n- Do not add new third‑party dependencies.\n- Use Python 3.11+ idioms: precise type hints, pathlib, logging (not print), context managers, f‑strings; avoid global mutable state.\n- Replace magic constants; validate inputs; use narrow try/except; reduce complexity.\n- Use tabs for indentation.\n- If no meaningful improvement is possible, return the original code unchanged.\n\nYour task:"
},
"auto_test_patches": true,
"auto_backup_before_patch": true,
"patch_approval_required": true,
"logging_level": "DEBUG",

"rewards": {
	"emitted": 1,
	"approved": 5,
	"rejected": -3,
	"skipped": 0,
	"tests_passed": 2,
	"tests_failed": -1
}
}
